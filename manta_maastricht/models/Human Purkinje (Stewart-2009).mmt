[[model]]
name: Stewart-2009
author: Michael clerx, modified by Henry Sutanto -- Maastricht University
desc: """
    Stewart-2009 model, adapted from CellML.

    The original cellml meta data follows below.

    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Penny Noble
    DPAG, University of Oxford

    Model Status
    - - - - - - -
    This CellML ersion of the model has been checked in COR and OpenCell. The
    units are consistent and the model runs to recreate the published results.

    Model Structure
    - - - - - - - -
    In the paper described here, Philip Stewart and colleagues present a
    details of their newly developed model for the human Purkinje cell
    including validation against experimental data. Ionic mechanisms underlying
    the heterogeneity between the Purkinje fibre and ventricular action
    potentials in humans and other species were analysed. The newly developed
    Purkinje fibre cell model adds a new member to the family of human cardiac
    cell models developed previously for the sino-atrial node, atrial and
    ventricular cells, which can be incorporated into an anatomical model of
    human heart with details of its electrophysiological heterogeneity and
    anatomical complexity.

    The original paper reference is cited below:
    - - - - - - - - - - - - - - - - - - - - - - -
    Mathematical model of the electrical action potential of Purkinje fibre
    cells
    Philip Stewart, Oleg V. Aslanidi, Denis Noble, Penelope J. Noble, Mark R.
    Boyett, and Henggui Zhang, 2009
    Philosophical Transactions of the Royal Society, 367, 2225-2255.
    PubMed ID: 19414454
    """
"""
###Changelog###
Up to 22/03/2019 : 
- State-dependent markov INa has been implemented 
- Markov INa has been validated (drug-free, Flecainide, Lidocaine, Vernakalant) --> Further improvement might still be needed.
"""
membrane.V      = -69.1370441636
calcium.Ca_i    = 0.000101878186157
calcium.Ca_SR   = 3.10836886659
calcium.Ca_ss   = 0.000446818714055
calcium.R_prime = 0.991580051908
sodium.Na_i     = 8.80420286532
potassium.K_i   = 136.78189416
if.y            = 0.0457562667987
ikr.Xr1         = 0.00550281999719
ikr.Xr2         = 0.313213286438
iks.Xs          = 0.00953708522975
ina.m           = 0.0417391656295
ina.h           = 0.190678733735
ina.j           = 0.238219836154
ical.d          = 0.000287906256206
ical.f          = 0.989328560288
ical.f2         = 0.995474890442
ical.fCass      = 0.999955429598
ito.s           = 0.963861017995
ito.r           = 0.00103618091197
"""
I_Na_Markov.C3 = 0.99
I_Na_Markov.C2 = 0.01
I_Na_Markov.C1 = 0  
I_Na_Markov.O  = 0  
I_Na_Markov.IF = 0  
I_Na_Markov.IC3 = 0 
I_Na_Markov.IC2 = 0 
I_Na_Markov.IM1 = 0 
I_Na_Markov.IM2 = 0 

I_Na_Markov.IFB = 0  
I_Na_Markov.IC3B = 0 
I_Na_Markov.IC2B = 0 
I_Na_Markov.OB = 0
"""
I_Na_Markov.IC3 = 0
I_Na_Markov.IC2 = 0
I_Na_Markov.IF = 0
I_Na_Markov.C3 = 1.00
I_Na_Markov.C2 = 0
I_Na_Markov.C1 = 0
I_Na_Markov.O = 0
I_Na_Markov.IS = 0
I_Na_Markov.DpIC3 = 0
I_Na_Markov.DpIC2 = 0
I_Na_Markov.DpIF = 0
I_Na_Markov.DpC3 = 0
I_Na_Markov.DpC2 = 0
I_Na_Markov.DpC1 = 0
I_Na_Markov.DpO = 0
I_Na_Markov.DpIS = 0
I_Na_Markov.DpIT = 0
I_Na_Markov.DIC3 = 0
I_Na_Markov.DIC2 = 0
I_Na_Markov.DIF = 0
I_Na_Markov.DC3 = 0
I_Na_Markov.DC2 = 0
I_Na_Markov.DC1 = 0
I_Na_Markov.DO = 0
I_Na_Markov.DIS = 0
I_Na_Markov.DIT = 0

[parameters]
ICaL_Block = 0.0
IK1_Block = 0.0
IKr_Block = 0.0
IKs_Block = 0.0
IKur_Block = 0.0
INa_Block = 0.0
INaL_Block = 0.0
INaK_Block = 0.0
INCX_Block = 0.0
Ito_Block = 0.0

Ca_o = 1.8 [mmol/L] : Extracellular Ca2+ concentration
K_o = 5.4 [mmol/L] : Extracellular K+ concentration
Na_o = 140 [mmol/L] : Extracellular Na+ concentration

[output]
Vm = membrane.V
Cai = 1000 * calcium.Ca_i 
#dVdt = dot(membrane.V)

#
# Engine
#
[engine]
time = 0 bind time
pace = 0 bind pace

#
# Membrane potential
#
[membrane]
markov_Na = 1
dot(V) = - (i_ion + i_stim + i_diff)
    in [mV]
    label membrane_potential
i_ion = sodium.INa_tot + potassium.IK_tot + calcium.ICa_tot
    desc: Ionic current out of the cell
i_stim = engine.pace * amplitude
    desc: """
        Stimulus current, also defined outward (so to excite the cell, you
        need a negative stimulus."""
    amplitude = -30
i_diff = 0 bind diffusion_current
    desc: Current to neighbouring cells, defined outward.

#
# Physical constants
#
[phys]
R = 8314.472 [J/mol/K]
T = 310 [K]
F = 96485.3415 [C/mmol]
RTF = R * T / F
FRT = F / R / T
FFRT = F * FRT
Cm = 0.185 [uF]
V_c = 0.016404 [um^3]

#
# (a) Inwared rectifier current, IK1
# Appendix page 2242
#
[ik]
use membrane.V
i_K1 = (1.0 - parameters.IK1_Block) * g_K1 * xK1_inf * (V - 8 - nernst.E_K)
    in [uA/uF]
g_K1 = 0.065 [1/ms]
xK1_inf = 1 / (1 + exp(0.1 * (V + 75.44)))

#
# (b) Transient outward current, ITo
# Appendix page 2242
#
[ito]
use membrane.V
i_to = (1.0 - parameters.Ito_Block) * g_to * r * s * (V - nernst.E_K)
    in [uA/uF]
g_to = 0.08184 [1/ms]
dot(s) = (s_inf - s) / tau_s
    s_inf = 1 / (1 + exp((V + 27) / 13))
    tau_s = 85 * exp(-(V + 25) ^ 2 / 320) + 5 / (1 + exp((V - 40) / 5)) + 42
dot(r) = (r_inf - r) / tau_r
    r_inf = 1 / (1 + exp((20 - V) / 13))
    tau_r = 10.45 * exp(-(V + 40) ^ 2 / 1800) + 7.3

#
# (c) Sustained current, Isus
# Appendix page 2243
#
[isus]
use membrane.V
i_sus = g_sus * a * (V - nernst.E_K)
    in [uA/uF]
g_sus = 0.0227 [1/ms]
a = 1 / (1 + exp((5 - V) / 17))

#
# (d) Hyperpolarization-activated current, If
# Appendix page 2243
# Described in detail on page 2229
#
[if]
use membrane.V
i_f_Na = y * g_f_Na * (V - nernst.E_Na)
    in [uA/uF]
    g_f_Na = 0.0145654 [1/ms]
i_f_K = y * g_f_K * (V - nernst.E_K)
    in [uA/uF]
    g_f_K = 0.0234346 [1/ms]
dot(y) = (y_inf - y) / tau_y
    y_inf = 1 / (1 + exp((V + 80.6) / 6.8))
    tau_y = 4000 / (alpha_y + beta_y)
        in [ms]
    alpha_y = 1 * exp(-2.9 - 0.04 * V)
        in [1/ms]
    beta_y = 1 * exp(3.6 + 0.11 * V)
        in [1/ms]

#
# (e) Fast sodium current, INa
# Appendix page 2243
#
[ina]
use membrane.V
g_Na = 130.5744 [1/ms]
i_Na = (1.0 - parameters.INa_Block) * g_Na * m ^ 3 * h * j * (V - nernst.E_Na)
    in [uA/uF]
dot(m) = (inf - m) / tau
    inf = 1 / (1 + exp((-56.86 - V) / 9.03)) ^ 2
    alpha = 1 / (1 + exp((-60 - V) / 5))
    beta = 0.1 / (1 + exp((V + 35) / 5)) + 0.1 / (1 + exp((V - 50) / 200))
    tau = alpha * beta
dot(h) = (inf - h) / tau
    inf = 1 / (1 + exp((V + 71.55) / 7.43)) ^ 2
    tau = 1 / (alpha + beta)
    alpha = if(V < -40, 0.057 * exp(-(V + 80) / 6.8), 0)
    beta = if(V < -40,
        2.7 * exp(0.079 * V) + 310000 * exp(0.3485 * V),
        0.77 / (0.13 * (1 + exp((V + 10.66) / -11.1))))
dot(j) = (inf - j) / tau
    inf = 1 / (1 + exp((V + 71.55) / 7.43)) ^ 2
    tau = 1 / (alpha + beta)
    alpha = if(V < -40,
        (-25428 * exp(0.2444 * V) - 6.948e-6 * exp(-0.04391 * V)) * (V + 37.78) / (1 + exp(0.311 * (V + 79.23))),
        0)
    beta = if(
        V < -40, 0.02424 * exp(-0.01052 * V) / (1 + exp(-0.1378 * (V + 40.14))),
        0.6 * exp(0.057 * V) / (1 + exp(-0.1 * (V + 32))))

########################################################
[I_Na_Markov]
# this state dependence of Na channel was from Moreno et al 2011 (Sci. Transl. Med)
# contains free, charged, neutral drug

class1_drug_cat = 3
Lidocaine_fact = if(class1_drug_cat==2 and new_drug_mode==0, 1, 0) ## example for Ib
Flecainide_fact = if(class1_drug_cat==3 and new_drug_mode==0, 1, 0) ## example for Ic
Vernakalant_fact = if(class1_drug_cat==4 and new_drug_mode==0, 1, 0) 

x1 = 0.36057957535032492
x2 = 0.7179274691124311
x3 = 1.605584824037277
x4 = 0.59287302759795724
x5 = 1.2234360770073813
x6 = 3.0917256447059636
x7 = 4.1175769389274191
x8 = 0.95671721171753377
x9 = 0.33315393201661725
x10 = 0.1617558938826722
x11 = 0.92041769187200684
x12 = 1.1110466091568281
x13 = 1.6237205347617047
x14 = 1.0084525374298714
x15 = 1.083421275240902
x16 = 1.0100098103650428
x17 = 1.0220785393756486
x18 = 16.37052465
x19 = 2.2019429238075569*1.1
x20 = 4.0
x21 = 1.1764521990705925
x22 = 1.1962611849308873*0.8333
x23 = 0.7738113215281344
x24 = 0.5192786194790526
x25 = 1.050647558186672

f1 = 15802.517082265076
f2 = 11212.49445307003
f3 = 1.0835911457972944
f4 = 4.7213138217409707
f5 = 1.1886854610200599
f6 = 1.1293915676022106
f7 = 0.98647121091698153
f8 = 0.54542349779755606
f9 = 1.020713680006784
f10 = 2.6609951303941308
f11 = 1.1411905523331658
f12 = 5.3540204782968566
f13 = 1.028853996176295
f14 = 1.0033797797467918

l1 = 1.36922845112808845e+04
l2 = 1.36922845112808845e+04
l3 = 9.75801811222358206e-01
l4 = 4.78855031291120348e+00
l5 = 9.75801811222358206e-01
l6 = 9.78288593348167645e-01
l7 = 9.78288593348167645e-01
l8 = 9.05788719283946997e-01
l9 = 9.05788719283946997e-01
l10 = 4.84105307990853273e+00

v1 = 7170.4622644564224
v2 = 15352.068978379524
v3 = 0.78329295519833497
v4 = 6.2271179964787571
v5 = 22.10184390723893
v6 = 1.5107146709941404
v7 = 1.0935642293370962
v8 = 0.65910138578597266
v9 = 2.3700350948377
v10 = 6.2071593539114822
v11 = 0
v12 = 0
v13 = 0
v14 = 0

#### new drug components ####
new_drug_mode = 0
n_diffusion = 0
n_kd_open = 0
n_k_off = 0
n_ki_off = 0
n_kc_off = 0
n_p22 = 0
n_p23 = 0
n_p24 = 0
n_p25 = 0
n_p26 = 0
n_p27 = 0
n_p28 = 0
n_p29 = 0
n_p30 = 0
n_p31 = 0
n_p32 = 0
n_p33 = 0
n_p34 = 0
n_p35 = 0

diffusion = ((new_drug_mode*n_diffusion) + (Flecainide_fact*5500) + (Lidocaine_fact*500) + (Vernakalant_fact*500)) #in [1 / M ms]
kd_open = ((new_drug_mode*n_kd_open) + (Flecainide_fact*11.2e-6) + (Lidocaine_fact*318e-6) + (Vernakalant_fact*318e-6)) * exp(-0.7 * membrane.V * phys.F / (phys.R * phys.T))
conc = 0
pH = 7.4
pKa_newdrug = 7.4
pKa_Lidocaine = 7.6
pKa_Flecainide = 9.3
pKa_Vernakalant = 5.4
#pH = (if(Lidocaine_fact==1, pH_Lidocaine, 0)) + (if(Flecainide_fact==1, pH_Flecainide, 0)) + (if(new_drug_mode==1, pH_newdrug, 0))
pKa = (if(Vernakalant_fact==1, pKa_Vernakalant, 0)) + (if(Lidocaine_fact==1, pKa_Lidocaine, 0)) + (if(Flecainide_fact==1, pKa_Flecainide, 0)) + (if(new_drug_mode==1, pKa_newdrug, 0))
portion = 1/(1+10^(pH-pKa))
conc_dplus = portion * conc
conc_d = (1-portion) * conc

kon = conc_dplus * diffusion #if(conc_dplus>0.0001, conc_dplus * diffusion, 1e-8) #### for protonated drugs
kcon = kon
koff = kd_open * diffusion
kcoff = koff

k_on = conc_d * diffusion #if(conc_d>0.0001, , 1e-8) #### for neutral drugs
k_off = ((new_drug_mode*n_k_off) + (Flecainide_fact*400e-6) + (Lidocaine_fact*400e-6) + (Vernakalant_fact*400e-6)) * diffusion
ki_on = k_on / 2
ki_off = ((new_drug_mode*n_ki_off) + (Flecainide_fact*5.4e-6) + (Lidocaine_fact*3.4e-6) + (Vernakalant_fact*3.4e-6)) * diffusion
kc_on = k_on / 2
kc_off = ((new_drug_mode*n_kc_off) + (Flecainide_fact*800e-6) + (Lidocaine_fact*900e-6) + (Vernakalant_fact*900e-6)) * diffusion

Tfactor = 1 / (3 ^ ((37 - (phys.T - 273)) / 10.0)) #0.19245

# Transition rates (ms-1)  
a11 = Tfactor * p1 / (p2 * exp(-(membrane.V - actshift) / p3) + p6 * exp(-(membrane.V - actshift) / p7))
a12 = Tfactor * p1 / (p2 * exp(-(membrane.V - actshift) / p4) + p6 * exp(-(membrane.V - actshift) / p7))
a13 = Tfactor * p1 / (p2 * exp(-(membrane.V - actshift) / p5) + p6 * exp(-(membrane.V - actshift) / p7))
b11 = Tfactor * p8 * exp(-(membrane.V - actshift) / p9)
b12 = Tfactor * p10 * exp(-(membrane.V - actshift - p11) / p9)
b13 = Tfactor * p12 * exp(-(membrane.V - actshift - p13) / p9)
#a3 = p14 * exp(-membrane.V / p15)
#b3 = p16 * exp(membrane.V / p17)
#aa = a3 / (a3 + b3)
#tau = 1 / (a3 + b3)
a3_ss = 1/(1+exp((membrane.V - p14_new) / p15_new))
a3_tau = h1 + p01 * exp(p16_new * (membrane.V - p14_new)) / (1 + exp(p17_new * (membrane.V - p14_new)))
a3 = Tfactor * a3_ss / a3_tau
b3 = Tfactor * (1 - a3_ss) / a3_tau
a2 = Tfactor * p18 * exp(membrane.V / p19)
b2 = (a13*a2*a3) / (b13*b3)
ax = p20 * a2
bx = p21 * a3

a13c = p22 * a13
b13c = if(kon>0, (b13 * kcon * koff * a13c) / (kon * kcoff * a13), 0)
a13n = p23 * a13
b13n = if(k_on>0, (b13 * kc_on * a13n * k_off) / (kc_off * a13 * k_on), 0)
ax1 = p24 * ax
bx1 = p25 * bx
ax2 = p26 * ax
bx2 = if(ki_on>0, (bx * k_on * ax2 * ki_off) / (ax * ki_on * k_off), 0)
a22 = p27 * a2
a_22 = p28 * a2
b22 = if(b13c>0, (a13c * a22 * a33) / (b13c * b33), 0)
b_22 = if(b13n>0, (a_33 * a13n * a_22) / (b_33 * b13n), 0)
b33 = p29 * b3
b_33 = p30 * b3
a33 = p31 * a3
a_33 = if(ki_on>0, (ki_off * a3 * kc_on * b_33) / (ki_on * kc_off * b3), 0)
## DIT or DpIT ONLY in Lidocaine (Inactivated, Trapped state)
a44 = p32 * a2
b44 = p33 * a3
a_44 = p34 * a2
b_44 = p35 * a2

actshift = -15*x19
h1 = 2*x20
p1 = 8.5539*x1
p2 = 7.4392e-2*x2
p3 = 17.0*x3
p4 = 15.0*x4
p5 = 12.0*x5
p6 = 2.0373e-1*x6
p7 = 150*x7
p8 = 7.5215e-2*x8
p9 = 20.3*x9
p10 = 2.7574*x10
p11 = 5*x11
p12 = 4.7755e-1*x12
p13 = 10*x13
p14 = 5.1458e-6 #5.1458e-6 *1.0325463712122342
p15 = 8.2471 #0.8*8.2471 * 0.10401603829601243
p16 = 6.1205 #6.1205 * 0.96668483687506801
p17 = 12.542 #0.8*12.542 * 1.0908872227689068
p18 = 13.370*x14
p19 = 43.749*x15
p20 = 3.4229e-2*x16
p21 = 1.7898e-2*x17
p14_new = -70*x21
p15_new = 3.5*x22
p16_new = 0.052 * 2.9*x23
p17_new = 0.132 * 1.9*x24
p01 = 41*x25

p22 = (new_drug_mode*n_p22) + (Flecainide_fact*3.6324e-3*f1) + (Lidocaine_fact*5.6974e-03*l1) + (Vernakalant_fact*5.6974e-03*v1) #3.6324e-3
p23 = (new_drug_mode*n_p23) + (Flecainide_fact*2.6452*f2) + (Lidocaine_fact*8.4559e+01*l2) + (Vernakalant_fact*8.4559e+01*v2) #2.6452
p24 = (new_drug_mode*n_p24) + (Flecainide_fact*5.7831e-5*f3) + (Lidocaine_fact*6.3992e-07*l3) + (Vernakalant_fact*6.3992e-07*v3) #5.7831e-5
p25 = (new_drug_mode*n_p25) + (Flecainide_fact*1.6689e-8*f4) + (Lidocaine_fact*1.3511e+00*l4) + (Vernakalant_fact*1.3511e+00*v4) #1.6689e-8
p26 = (new_drug_mode*n_p26) + (Flecainide_fact*2.6126e-01*f5) + (Lidocaine_fact*1.3110e-01*l5) + (Vernakalant_fact*1.3110e-01*v5) #2.6126e-01
p27 = (new_drug_mode*n_p27) + (Flecainide_fact*1.4847e3*f6) + (Lidocaine_fact*6.7067e-06*l6) + (Vernakalant_fact*6.7067e-06*v6) #1.4847e3
p28 = (new_drug_mode*n_p28) + (Flecainide_fact*4.2385e+01*f7) + (Lidocaine_fact*1.7084e-05*l7) + (Vernakalant_fact*1.7084e-05*v7) #4.2385e+01
p29 = (new_drug_mode*n_p29) + (Flecainide_fact*1.7352e-6*f8) + (Lidocaine_fact*1.9698e-05*l8) + (Vernakalant_fact*1.9698e-05*v8) #1.7352e-6
p30 = (new_drug_mode*n_p30) + (Flecainide_fact*2.1181e+00*f9) + (Lidocaine_fact*4.8477*l9) + (Vernakalant_fact*4.8477*v9) #2.1181e+00
p31 = (new_drug_mode*n_p31) + (Flecainide_fact*6.7505e-05*f10) + (Lidocaine_fact*3.2976*l10) + (Vernakalant_fact*3.2976*v10) #6.7505e-05
p32 = (new_drug_mode*n_p32) + (Flecainide_fact*2.4135*f11) + (Lidocaine_fact*0) + (Vernakalant_fact*2.4135*v11)
p33 = (new_drug_mode*n_p33) + (Flecainide_fact*4.9001e-2*f12) + (Lidocaine_fact*0) + (Vernakalant_fact*4.9001e-2*v12) 
p34 = (new_drug_mode*n_p34) + (Flecainide_fact*1.0326e-03*f13) + (Lidocaine_fact*0) + (Vernakalant_fact*1.0326e-03*v13) 
p35 = (new_drug_mode*n_p35) + (Flecainide_fact*2.1378e-02*f14) + (Lidocaine_fact*0) + (Vernakalant_fact*2.1378e-02*v14)

dot(IC3) = -IC3 * (a11 + a3 + ki_on) + IC2 * b11 + C3 * b3 + ki_off * DIC3
dot(IC2) = -IC2 * (b11 + a3 + a12 + ki_on) + IC3 * a11 + IF * b12 + C2 * b3 + ki_off * DIC2
dot(IF) = -IF * (b12 + a3 + b2 + ki_on) + IC2 * a12 + C1 * b3 + O * a2 + ki_off * DIF
dot(C3) = -C3 * (b3 + a11 + kcon + kc_on) + IC3 * a3 + C2 * b11 + DpC3 * kcoff + DC3 * kc_off
dot(C2) = -C2 * (b11 + b3 + a12 + kcon + kc_on) + C3 * a11 + IC2 * a3 + C1 * b12 + DpC2 * kcoff + DC2 * kc_off
dot(C1) = -C1 * (b12 + b3 + a13 + kcon + kc_on) + C2 * a12 + IF * a3 + O * b13 + DpC1 * kcoff + DC1 * kc_off
dot(O) = -O * (b13 + a2 + ax + kon + k_on) + C1 * a13 + IF * b2 + IS * bx + DpO * koff + DO * k_off
dot(IS) = -IS * (bx + ki_on) + O * ax + DIS * ki_off

dot(DpIC3) = -DpIC3 * (a33 + a11) + DpIC2 * b11 + DpC3 * b33
dot(DpIC2) = -DpIC2 * (b11 + a33 + a12) + DpIC3 * a11 + DpIF * b12 + DpC2 * b33
dot(DpIF) = -DpIF * (b12 + a33 + b22 + a44) + DpIC2 * a12 + DpC1 * b33 + DpO * a22 + DpIT * b44
dot(DpC3) = -DpC3 * (b33 + a11 + kcoff) + DpIC3 * a33 + DpC2 * b11 + C3 * kcon
dot(DpC2) = -DpC2 * (b11 + b33 + a12 + kcoff) + DpC3 * a11 + DpIC2 * a33 + DpC1 * b12 + C2 * kcon
dot(DpC1) = -DpC1 * (b12 + b33 + a13c + kcoff) + DpC2 * a12 + DpIF * a33 + DpO * b13c + C1 * kcon
dot(DpO) = -DpO * (b13c + a22 + ax1 + koff) + DpC1 * a13c + DpIF * b22 + DpIS * bx1 + O * kon
dot(DpIS) = -DpIS * (bx1) + DpO * ax1
dot(DpIT) = -DpIT * b44 + DpIF * a44

dot(DIC3) = -DIC3 * (a_33 + a11 + ki_off) + DIC2 * b11 + DC3 * b_33 + ki_on * IC3
dot(DIC2) = -DIC2 * (b11 + a_33 + a12 + ki_off) + DIC3 * a11 + DIF * b12 + DC2 * b_33 + ki_on * IC2
dot(DIF) = -DIF * (b12 + a_33 + b_22 + a_44 + ki_off) + DIC2 * a12 + DC1 * b_33 + DO * a_22 + DIT * b_44 + ki_on * IF
dot(DC3) = -DC3 * (b_33 + a11 + kc_off) + DIC3 * a_33 + DC2 * b11 + C3 * kc_on
dot(DC2) = -DC2 * (b11 + b_33 + a12 + kc_off) + DC3 * a11 + DIC2 * a_33 + DC1 * b12 + C2 * kc_on
dot(DC1) = -DC1 * (b12 + b_33 + a13n + kc_off) + DC2 * a12 + DIF * a_33 + DO * b13n + C1 * kc_on
dot(DO) = -DO * (b13n + a_22 + ax2 + k_off) + DC1 * a13n + DIF * b_22 + DIS * bx2 + O * k_on
dot(DIS) = -DIS * (bx2 + ki_off) + DO * ax2 + IS * ki_on
dot(DIT) = -DIT * b_44 + DIF * a_44

#E_Na = (phys.RTF) * log(138/10)
g_Na = x18*7.8 *1.0 *4.5 #7.8 *1.0 *49.5#* 45#29.5#* 2250
    in [1/ms]
I_Na_tot = (1 - parameters.INa_Block) * g_Na * O * (membrane.V - nernst.E_Na)
    in [pA]

############################################################
#
# (f) L-type calcium current, ICaL
# Appendix page 2244
#
[ical]
use membrane.V
use phys.FFRT, phys.FRT
use nernst.Ca_o
i_CaL = (1.0 - parameters.ICaL_Block) * (if(abs(V - 15) < 1e-6, a * (b - Ca_o) / (2 * FRT), numer / denom))
    numer = a * (V - 15) * (b * exp((V - 15) * 2 * FRT) - Ca_o)
    denom = (exp(2 * (V - 15) * FRT) - 1)
    a = g_CaL * d * f * f2 * fCass * 4 * FFRT
    b = 0.25 * calcium.Ca_ss
    in [uA/uF]
g_CaL = 3.98e-5 [cm/ms/uF]
dot(d) = (d_inf - d) / tau_d
    d_inf = 1 / (1 + exp((-8 - V) / 7.5))
    tau_d = 1 * alpha_d * beta_d + gamma_d
    alpha_d = 1.4 / (1 + exp((-35 - V) / 13)) + 0.25
    beta_d = 1.4 / (1 + exp((V + 5) / 5))
    gamma_d = 1 / (1 + exp((50 - V) / 20))
dot(f) = (f_inf - f) / tau_f
    f_inf = 1 / (1 + exp((V + 20) / 7))
    tau_f = 1102.5 * exp(-(V + 27) ^ 2 / 225) + 200 / (1 + exp((13 - V) / 10)) + 180 / (1 + exp((V + 30) / 10)) + 20
dot(f2) = (f2_inf - f2) / tau_f2
    f2_inf = 0.67 / (1 + exp((V + 35) / 7)) + 0.33
    tau_f2 = 562 * exp(-(V + 27) ^ 2 / 240) + 31 / (1 + exp((25 - V) / 10)) + 80 / (1 + exp((V + 30) / 10))
dot(fCass) = (fCass_inf - fCass) / tau_fCass
    fCass_inf = 0.6 / (1 + (calcium.Ca_ss / 0.05) ^ 2) + 0.4
    tau_fCass = 80 / (1 + (calcium.Ca_ss / 0.05) ^ 2) + 2
    in [ms]

#
# (g) Slow delayed rectifier current, IKs
# Appendix page 2245
# Also called the "slow time-dependent potassium current"
#
[iks]
use membrane.V
i_Ks = (1.0 - parameters.IKs_Block) * g_Ks * Xs ^ 2 * (V - nernst.E_Ks)
    in [uA/uF]
g_Ks = 0.2352 [1/ms]
dot(Xs) = (xs_inf - Xs) / tau_xs
    xs_inf = 1 / (1 + exp((-5 - V) / 14))
    tau_xs = 1 * alpha_xs * beta_xs + 80
    alpha_xs = 1400 / sqrt(1 + exp((5 - V) / 6))
    beta_xs = 1 / (1 + exp((V - 35) / 15))

#
# (h) Rapid delayed rectifier current, IKr
# Appendix page 2246
# Also called the "rapid time-dependent potassium current"
#
[ikr]
use membrane.V
i_Kr = (1.0 - parameters.IKr_Block) * g_Kr * sqrt(nernst.K_o / 5.4) * Xr1 * Xr2 * (V - nernst.E_K)
    in [uA/uF]
    g_Kr = 0.0918 [1/ms]
dot(Xr1) = (xr1_inf - Xr1) / tau_xr1
    xr1_inf = 1 / (1 + exp((-26 - V) / 7))
    tau_xr1 = 1 * alpha_xr1 * beta_xr1
    alpha_xr1 = 450 / (1 + exp((-45 - V) / 10))
    beta_xr1 = 6 / (1 + exp((V + 30) / 11.5))
dot(Xr2) = (xr2_inf - Xr2) / tau_xr2
    xr2_inf = 1 / (1 + exp((V + 88) / 24))
    tau_xr2 = 1 * alpha_xr2 * beta_xr2
    alpha_xr2 = 3 / (1 + exp((-60 - V) / 20))
    beta_xr2 = 1.12 / (1 + exp((V - 60) / 20))

#
# (i) Na/Ca exchange current, INaCa
# Appendix page 2246
#
[inaca]
use membrane.V
use sodium.Na_i, nernst.Na_o, calcium.Ca_i, nernst.Ca_o
i_NaCa = (1.0 - parameters.INCX_Block) * (K_NaCa * (exp(g * vfrt) * Na_i^3 * Ca_o - exp((g - 1) * vfrt) * nao3 * Ca_i * alpha) / (
         km * (1 + K_sat * exp((g - 1) * V * phys.FRT))))
    in [uA/uF]
    vfrt = V * phys.FRT
    g = 0.35
    nao3 = Na_o^3
    km = (Na_o^3 + Km_Nai^3) * (Km_Ca + Ca_o)
    K_NaCa = 1000 [uA/uF]
    K_sat = 0.1
    alpha = 2.5
    Km_Ca = 1.38 [mmol/L]
    Km_Nai = 87.5 [mmol/L]

#
# (j) Na/K pump current, INaK
# Appendix page 2247
#
[inak]
use membrane.V
use nernst.K_o, sodium.Na_i
i_NaK = (1.0 - parameters.INaK_Block) * (P_NaK * K_o / (K_o + K_mk) * Na_i / (Na_i + K_mNa) / (1 + 0.1245 * exp(-0.1 * vfrt) + 0.0353 * exp(-vfrt)))
    in [uA/uF]
    vfrt = V * phys.FRT
P_NaK = 2.724 [uA/uF]
K_mk = 1 [mmol/L]
K_mNa = 40 [mmol/L]

#
# (j) Calcium pump current, IpCa
# Appendix page 2247
#
[ipca]
i_p_Ca = g_pCa * calcium.Ca_i / (calcium.Ca_i + K_pCa)
    in [uA/uF]
g_pCa = 0.1238 [uA/uF]
K_pCa = 0.0005 [mmol/L]

#
# (j) Potassium pump current, IpK
# Appendix page 2247
#
[ipk]
use membrane.V
i_p_K = g_pK * (V - nernst.E_K) / (1 + exp((25 - V) / 5.98))
    in [uA/uF]
g_pK = 0.0146 [1/ms]

#
# (k) Sodium background current, IbNa
# Appendix page 2247
#
[ibna]
use membrane.V
i_b_Na = g_bna * (V - nernst.E_Na)
    in [uA/uF]
g_bna = 0.00029 [1/ms]

#
# (k) Calcium background current, IbCa
# Appendix page 2247
#
[ibca]
use membrane.V
i_b_Ca = g_bca * (V - nernst.E_Ca)
    in [uA/uF]
g_bca = 0.000592 [1/ms]

#
# (l) Calcium dynamics
# Appendix page 2247
#
[calcium]
use membrane.V
ICa_cyt = ibca.i_b_Ca + ipca.i_p_Ca - 2 * inaca.i_NaCa
ICa_tot = ICa_cyt + ical.i_CaL
dot(Ca_i) = Ca_i_bufc * ((i_leak - i_up) * V_sr / phys.V_c + i_xfer - ICa_cyt * phys.Cm / (2 * phys.V_c * phys.F))
    in [mmol/L]
dot(Ca_SR) = Ca_sr_bufsr * (i_up - (i_rel + i_leak))
    in [mmol/L]
dot(Ca_ss) = Ca_ss_bufss * (-1 * ical.i_CaL * phys.Cm / (2 * 1 * V_ss * phys.F) + i_rel * V_sr / V_ss - i_xfer * phys.V_c / V_ss)
    in [mmol/L]
i_rel = V_rel * O * (Ca_SR - Ca_ss)
    in [mmol/L/ms]
i_up = Vmax_up / (1 + K_up ^ 2 / Ca_i ^ 2)
    in [mmol/L/ms]
i_leak = V_leak * (Ca_SR - Ca_i)
    in [mmol/L/ms]
i_xfer = V_xfer * (Ca_ss - Ca_i)
    in [mmol/L/ms]
O = k1 * Ca_ss ^ 2 * R_prime / (k3 + k1 * Ca_ss ^ 2)
dot(R_prime) = -k2 * Ca_ss * R_prime + k4 * (1 - R_prime)
k1 = k1_prime / kcasr
    in [m^6/s/mol^2 (1000.0)]
k2 = k2_prime * kcasr
    in [m^3/s/mol (1000.0)]
k1_prime = 0.15
    in [m^6/s/mol^2 (1000.0)]
k2_prime = 0.045
    in [m^3/s/mol (1000.0)]
k3 = 0.06 [1/ms]
k4 = 0.005 [1/ms]
EC = 1.5 [mmol/L]
max_sr = 2.5
min_sr = 1
kcasr = max_sr - (max_sr - min_sr) / (1 + (EC / Ca_SR) ^ 2)
V_rel = 0.102 [1/ms]
V_xfer = 0.0038 [1/ms]
K_up = 0.00025 [mmol/L]
V_leak = 0.00036 [1/ms]
Vmax_up = 0.006375 [mmol/L/ms]
Ca_i_bufc = 1 / (1 + Buf_c * K_buf_c / (Ca_i + K_buf_c) ^ 2)
Ca_sr_bufsr = 1 / (1 + Buf_sr * K_buf_sr / (Ca_SR + K_buf_sr) ^ 2)
Ca_ss_bufss = 1 / (1 + Buf_ss * K_buf_ss / (Ca_ss + K_buf_ss) ^ 2)
Buf_c = 0.2 [mmol/L]
K_buf_c = 0.001 [mmol/L]
Buf_sr = 10 [mmol/L]
K_buf_sr = 0.3 [mmol/L]
Buf_ss = 0.4 [mmol/L]
K_buf_ss = 0.00025 [mmol/L]
V_sr = 0.001094 [um^3]
V_ss = 5.468e-5 [um^3]

#
# (m) Sodium dynamics
# Appendix page 2248
#
[sodium]
INa_tot = (if(membrane.markov_Na == 1, I_Na_Markov.I_Na_tot, ina.i_Na)) + ibna.i_b_Na + if.i_f_Na + 3 * inak.i_NaK + 3 * inaca.i_NaCa
dot(Na_i) = -INa_tot / (phys.V_c * phys.F) * phys.Cm
    in [mmol/L]

#
# (m) Potassium dynamics
# Appendix page 2248
#
[potassium]
IK_tot = ik.i_K1 + ito.i_to + if.i_f_K + isus.i_sus + ikr.i_Kr + iks.i_Ks + ipk.i_p_K - 2 * inak.i_NaK
dot(K_i) = -IK_tot / (phys.V_c * phys.F) * phys.Cm  # phys.Cm is not in the appendix!
    in [mmol/L]

#
# Reversal potentials
#
[nernst]
use potassium.K_i
use sodium.Na_i
use calcium.Ca_i
K_o = parameters.K_o
E_K = phys.RTF * log(K_o / K_i)
    in [mV]
E_Ks = phys.RTF * log((K_o + P_kna * Na_o) / (K_i + P_kna * Na_i))
    in [mV]
P_kna = 0.03
Na_o = parameters.Na_o
E_Na = phys.RTF * log(Na_o / Na_i)
    in [mV]
Ca_o = parameters.Ca_o
E_Ca = 0.5 * phys.RTF * log(Ca_o / Ca_i)
    in [mV]

[[script]]
import matplotlib.pyplot as pl
import myokit

#
# This example file shows two spontaneous depolarizations in the 2009 model by
# Stewart et al.
#

# Get simulation from magic method
m = get_model()
s = myokit.Simulation(m)

# Run simulation
d = s.run(2000)

# Display the result
pl.plot(d['engine.time'], d['membrane.V'])
pl.title('Membrane potential [mV]')
pl.show()


[[model]]
author: Henry Sutanto -- Maastricht University
desc: """
    Mathematical Model Of A Human Atrial Action Potential, 1998
    Noble
    Penny
    Oxford University
    Model Status
    This model has been validated by
    Penny Noble of Oxford University and is known to run in COR and PCEnv.
    ValidateCellML verifies this model as valid CellML, but detects unit
    inconsistencies.
    Model Structure
    The ionic mechanisms underlying many
    important properties of the human atrial action potential are poorly
    understood.  Using specific formulations of the K
    +
    , Na
    +
    and Ca
    2+
    currents based on experimental data recorded from human atrial
    myocytes, along with representations of pump, exchange and background
    currents, Marc Courtemanche, Rafael J. Ramirez and Stanley Nattel
    developed a mathematical model of the action potential (see the figure
    below).
    This mathematical model builds mostly on the classical work of
    Luo and Rudy (see The Luo-Rudy Ventricular Model II (dynamic), 1994).
    Courtemanche
    et al
    effectively develop a working model of the human
    atrial action potential from the Luo-Rudy model which is based on
    guinea pig ventricular cells.  Their primary goal was to develop a
    useful model of the action potential from which they could gain
    insights into experimental observations made on human atrial cells and
    tissues and make predictions regarding the behaviour of these cells
    under previously untested conditions
    The complete original paper
    reference is cited below:
    Ionic mechanisms underlying human atrial
    action potential properties: insights from a mathematical model, Marc
    Courtemanche, Rafael J. Ramirez and Stanley Nattel, 1998,
    American
    Journal of Physiology
    , 275, H301-H321.
    PubMed ID: 9688927
    schematic
    diagram of a human atrial myocyte
    A schematic representation of
    currents, pumps and exchangers included in the model.  The cell
    includes three intracellular compartments: cytoplasm, sarcoplasmic
    reticulum (SR) release compartment [junctional SR (JSR)], and SR
    uptake compartment [network SR (NSR)].
    """
"""
###Changelog###
Up to 22/03/2019 : 
- State-dependent markov INa has been implemented 
- Markov INa has been validated (drug-free, Flecainide, Lidocaine, Vernakalant) --> Further improvement might still be needed.
"""
name: courtemanche_1998
# Initial values
membrane.V = -81.18
fast_sodium_current_m_gate.m = 0.002908
fast_sodium_current_h_gate.h = 0.9649
fast_sodium_current_j_gate.j = 0.9775
transient_outward_K_current_oa_gate.oa = 0.03043
transient_outward_K_current_oi_gate.oi = 0.9992
ultrarapid_delayed_rectifier_K_current_ua_gate.ua = 0.004966
ultrarapid_delayed_rectifier_K_current_ui_gate.ui = 0.9986
rapid_delayed_rectifier_K_current_xr_gate.xr = 3.296e-05
slow_delayed_rectifier_K_current_xs_gate.xs = 0.01869
L_type_Ca_channel_d_gate.d = 0.0001367
L_type_Ca_channel_f_gate.f = 0.9996
L_type_Ca_channel_f_Ca_gate.f_Ca = 0.7755
Ca_release_current_from_JSR_u_gate.u = 2.35e-112
Ca_release_current_from_JSR_v_gate.v = 1.0
Ca_release_current_from_JSR_w_gate.w = 0.9992
intracellular_ion_concentrations.Na_i = 11.17
intracellular_ion_concentrations.K_i = 139.0
intracellular_ion_concentrations.Ca_i = 0.0001013
intracellular_ion_concentrations.Ca_up = 1.488
intracellular_ion_concentrations.Ca_rel = 1.488
TRPM4.TRPM4_Act_Vm = 0
TRPM4.TRPM4_Act_Ca = 0
"""
I_Na_Markov.C3 = 0.99
I_Na_Markov.C2 = 0.01
I_Na_Markov.C1 = 0  
I_Na_Markov.O  = 0  
I_Na_Markov.IF = 0  
I_Na_Markov.IC3 = 0 
I_Na_Markov.IC2 = 0 
I_Na_Markov.IM1 = 0 
I_Na_Markov.IM2 = 0 

I_Na_Markov.IFB = 0  
I_Na_Markov.IC3B = 0 
I_Na_Markov.IC2B = 0 
I_Na_Markov.OB = 0
"""
I_Na_Markov.IC3 = 0
I_Na_Markov.IC2 = 0
I_Na_Markov.IF = 0
I_Na_Markov.C3 = 1.00
I_Na_Markov.C2 = 0
I_Na_Markov.C1 = 0
I_Na_Markov.O = 0
I_Na_Markov.IS = 0
I_Na_Markov.DpIC3 = 0
I_Na_Markov.DpIC2 = 0
I_Na_Markov.DpIF = 0
I_Na_Markov.DpC3 = 0
I_Na_Markov.DpC2 = 0
I_Na_Markov.DpC1 = 0
I_Na_Markov.DpO = 0
I_Na_Markov.DpIS = 0
I_Na_Markov.DpIT = 0
I_Na_Markov.DIC3 = 0
I_Na_Markov.DIC2 = 0
I_Na_Markov.DIF = 0
I_Na_Markov.DC3 = 0
I_Na_Markov.DC2 = 0
I_Na_Markov.DC1 = 0
I_Na_Markov.DO = 0
I_Na_Markov.DIS = 0
I_Na_Markov.DIT = 0

[parameters]
AF = 0
remodeling_AF_INa = if(AF>0, 0.9, 1.0)
remodeling_AF_IKs = if(AF>0, 2.0, 1.0)
remodeling_AF_IKur = if(AF>0, 0.45, 1.0)
remodeling_AF_IK1 = if(AF>0, 2.0, 1.0)
remodeling_AF_Ito = if(AF>0, 0.2, 1.0)
remodeling_AF_ICaL = if(AF>0, 0.5, 1.0)
remodeling_AF_NCX = if(AF>0, 1.4, 1.0)

ICaL_Block = 0.0
IK1_Block = 0.0
IKr_Block = 0.0
IKs_Block = 0.0
IKur_Block = 0.0
INa_Block = 0.0
INaL_Block = 0.0
INaK_Block = 0.0
INCX_Block = 0.0
Ito_Block = 0.0

Ca_o = 1.8
K_o = 5.4
Na_o = 140
        
[output]
Vm = membrane.V
Cai = 1000 * intracellular_ion_concentrations.Ca_i
#dVdt = dot(membrane.V)

[Ca_buffers]
CMDN_max = 0.05
    in [mM]
CSQN_max = 10.0
    in [mM]
Ca_CMDN = CMDN_max * intracellular_ion_concentrations.Ca_i / (intracellular_ion_concentrations.Ca_i + Km_CMDN)
    in [mM]
Ca_CSQN = CSQN_max * intracellular_ion_concentrations.Ca_rel / (intracellular_ion_concentrations.Ca_rel + Km_CSQN)
    in [mM]
Ca_TRPN = TRPN_max * intracellular_ion_concentrations.Ca_i / (intracellular_ion_concentrations.Ca_i + Km_TRPN)
    in [mM]
Km_CMDN = 0.00238
    in [mM]
Km_CSQN = 0.8
    in [mM]
Km_TRPN = 0.0005
    in [mM]
TRPN_max = 0.07
    in [mM]

[Ca_leak_current_by_the_NSR]
Ca_up_max = 15.0
    in [mM]
i_up_leak = Ca_uptake_current_by_the_NSR.I_up_max * intracellular_ion_concentrations.Ca_up / Ca_up_max
    in [mM/ms]

[Ca_release_current_from_JSR]
Fn = 1000.0 [m^3*s/mol  (0.001)] * (1e-15 [1/m^3  (1e+18)] * intracellular_ion_concentrations.V_rel * i_rel - 1e-15 [1/m^3  (1e+18)] / (2.0 * membrane.F) * (0.5 * L_type_Ca_channel.i_Ca_L - 0.2 * Na_Ca_exchanger_current.i_NaCa))
    in [1]
K_rel = 30.0
    in [1/ms]
i_rel = K_rel * Ca_release_current_from_JSR_u_gate.u ^ 2.0 * Ca_release_current_from_JSR_v_gate.v * Ca_release_current_from_JSR_w_gate.w * (intracellular_ion_concentrations.Ca_rel - intracellular_ion_concentrations.Ca_i)
    in [mM/ms]

[Ca_release_current_from_JSR_u_gate]
tau_u = 8.0 [ms]
    in [ms]
dot(u) = (u_infinity - u) / tau_u
    in [1]
u_infinity = (1.0 + exp(-(Ca_release_current_from_JSR.Fn -  3.41749999999999983e-13) / 1.367e-15)) ^ (-1.0)
    in [1]

[Ca_release_current_from_JSR_v_gate]
tau_v = 1.91 [ms] + 2.09 [ms] * (1.0 + exp(-(Ca_release_current_from_JSR.Fn -  3.41749999999999983e-13) / 1.367e-15)) ^ (-1.0)
    in [ms]
dot(v) = (v_infinity - v) / tau_v
    in [1]
v_infinity = 1.0 - (1.0 + exp(-(Ca_release_current_from_JSR.Fn - 6.835e-14) / 1.367e-15)) ^ (-1.0)
    in [1]

[Ca_release_current_from_JSR_w_gate]
tau_w = piecewise(abs(membrane.V - 7.9 [mV]) < 1e-10 [mV], 6.0 [ms] * 0.2 / 1.3, 6.0 [ms] * (1.0 - exp(-(membrane.V - 7.9 [mV]) / 5.0 [mV])) / ((1.0 + 0.3 * exp(-(membrane.V - 7.9 [mV]) / 5.0 [mV])) * 1.0 [1/mV] * (membrane.V - 7.9 [mV])))
    in [ms]
dot(w) = (w_infinity - w) / tau_w
    in [1]
w_infinity = 1.0 - (1.0 + exp(-(membrane.V - 40.0 [mV]) / 17.0 [mV])) ^ (-1.0)
    in [1]

[Ca_uptake_current_by_the_NSR]
I_up_max = 0.005
    in [mM/ms]
K_up = 0.00092
    in [mM]
i_up = I_up_max / (1.0 + K_up / intracellular_ion_concentrations.Ca_i)
    in [mM/ms]

[L_type_Ca_channel]
g_Ca_L = parameters.remodeling_AF_ICaL * 0.12375
    in [1/ms]
i_Ca_L = (1 - parameters.ICaL_Block) * membrane.Cm * g_Ca_L * L_type_Ca_channel_d_gate.d * L_type_Ca_channel_f_gate.f * L_type_Ca_channel_f_Ca_gate.f_Ca * (membrane.V - 65.0 [mV])
    in [pA]

[L_type_Ca_channel_d_gate]
dot(d) = (d_infinity - d) / tau_d
    in [1]
d_infinity = (1.0 + exp((membrane.V + 10.0 [mV]) / -8.0 [mV])) ^ (-1.0)
    in [1]
#tau_d = 0.6 + 30.0 / (1 + exp(((membrane.V + 10) / 1.5)))    
tau_d = 0.6 + 30.0 / (1 + exp(((membrane.V + 40) / 15)^2.0))    
#tau_d = piecewise(abs(membrane.V + 10.0 [mV]) < 1e-10 [mV], 4.579 [ms] / (1.0 + exp((membrane.V + 10.0 [mV]) / -6.24 [mV])), (1.0 - exp((membrane.V + 10.0 [mV]) / -6.24 [mV])) / (0.035 [1/mV/ms] * (membrane.V + 10.0 [mV]) * (1.0 + exp((membrane.V + 10.0 [mV]) / -6.24 [mV]))))
#    in [ms]


[L_type_Ca_channel_f_Ca_gate]
dot(f_Ca) = (f_Ca_infinity - f_Ca) / tau_f_Ca
    in [1]
f_Ca_infinity = (1.0 + intracellular_ion_concentrations.Ca_i / 0.00035 [mM]) ^ (-1.0)
    in [1]
tau_f_Ca = 2.0 [ms]
    in [ms]

[L_type_Ca_channel_f_gate]
dot(f) = (f_infinity - f) / tau_f
    in [1]
f_infinity = exp(-(membrane.V + 28.0 [mV]) / 6.9 [mV]) / (1.0 + exp(-(membrane.V + 28.0 [mV]) / 6.9 [mV]))
    in [1]
tau_f = 9.0 [ms] * (0.0197 * exp(-0.0337 [1/mV] ^ 2.0 * (membrane.V + 10.0 [mV]) ^ 2.0) + 0.02) ^ (-1.0)
    in [ms]

[Na_Ca_exchanger_current]
I_NaCa_max = parameters.remodeling_AF_NCX * 1600.0
    in [A/F]
K_mCa = 1.38
    in [mM]
K_mNa = 87.5
    in [mM]
K_sat = 0.1
    in [1]
gamma = 0.35
    in [1]
i_NaCa = (1.0 - parameters.INCX_Block) * membrane.Cm * I_NaCa_max * (exp(gamma * membrane.F * membrane.V / (membrane.R * membrane.T)) * intracellular_ion_concentrations.Na_i ^ 3.0 * standard_ionic_concentrations.Ca_o - exp((gamma - 1.0) * membrane.F * membrane.V / (membrane.R * membrane.T)) * standard_ionic_concentrations.Na_o ^ 3.0 * intracellular_ion_concentrations.Ca_i) / ((K_mNa ^ 3.0 + standard_ionic_concentrations.Na_o ^ 3.0) * (K_mCa + standard_ionic_concentrations.Ca_o) * (1.0 + K_sat * exp((gamma - 1.0) * membrane.V * membrane.F / (membrane.R * membrane.T))))
    in [pA]

[background_currents]
E_Ca = membrane.R * membrane.T / (2.0 * membrane.F) * log(standard_ionic_concentrations.Ca_o / intracellular_ion_concentrations.Ca_i)
    in [mV]
g_B_Ca = 0.001131
    in [1/ms]
g_B_K = 0.0
    in [1/ms]
g_B_Na =  6.74437500000000015e-04
    in [1/ms]
i_B_Ca = membrane.Cm * g_B_Ca * (membrane.V - E_Ca)
    in [pA]
i_B_K = membrane.Cm * g_B_K * (membrane.V - time_independent_potassium_current.E_K)
    in [pA]
i_B_Na = membrane.Cm * g_B_Na * (membrane.V - fast_sodium_current.E_Na)
    in [pA]

[environment]
time = 0.0 bind time
    in [ms]

[fast_sodium_current]
E_Na = membrane.R * membrane.T / membrane.F * log(standard_ionic_concentrations.Na_o / intracellular_ion_concentrations.Na_i)
    in [mV]
g_Na = parameters.remodeling_AF_INa * 7.8
    in [1/ms]
i_Na = (1 - parameters.INa_Block) * membrane.Cm * g_Na * fast_sodium_current_m_gate.m ^ 3.0 * fast_sodium_current_h_gate.h * fast_sodium_current_j_gate.j * (membrane.V - E_Na)
    in [pA]

[fast_sodium_current_h_gate]
alpha_h = piecewise(membrane.V < -40.0 [mV], 0.135 [1/ms] * exp((membrane.V + 80.0 [mV]) / -6.8 [mV]), 0.0 [1/ms])
    in [1/ms]
beta_h = piecewise(membrane.V < -40.0 [mV], 3.56 [1/ms] * exp(0.079 [1/mV] * membrane.V) + 310000.0 [1/ms] * exp(0.35 [1/mV] * membrane.V), 1.0 / (0.13 [ms] * (1.0 + exp((membrane.V + 10.66 [mV]) / -11.1 [mV]))))
    in [1/ms]
dot(h) = (h_inf - h) / tau_h
    in [1]
h_inf = alpha_h / (alpha_h + beta_h)
    in [1]
tau_h = 1.0 / (alpha_h + beta_h)
    in [ms]

[fast_sodium_current_j_gate]
alpha_j = piecewise(membrane.V < -40.0 [mV], (-127140.0 [1/mV/ms] * exp(0.2444 [1/mV] * membrane.V) - 3.474e-05 [1/mV/ms] * exp(-0.04391 [1/mV] * membrane.V)) * (membrane.V + 37.78 [mV]) / (1.0 + exp(0.311 [1/mV] * (membrane.V + 79.23 [mV]))), 0.0 [1/ms])
    in [1/ms]
beta_j = piecewise(membrane.V < -40.0 [mV], 0.1212 [1/ms] * exp(-0.01052 [1/mV] * membrane.V) / (1.0 + exp(-0.1378 [1/mV] * (membrane.V + 40.14 [mV]))), 0.3 [1/ms] * exp(-2.535e-07 [1/mV] * membrane.V) / (1.0 + exp(-0.1 [1/mV] * (membrane.V + 32.0 [mV]))))
    in [1/ms]
dot(j) = (j_inf - j) / tau_j
    in [1]
j_inf = alpha_j / (alpha_j + beta_j)
    in [1]
tau_j = 1.0 / (alpha_j + beta_j)
    in [ms]

[fast_sodium_current_m_gate]
alpha_m = piecewise(membrane.V == -47.13 [mV], 3.2 [1/ms], 0.32 [1/mV/ms] * (membrane.V + 47.13 [mV]) / (1.0 - exp(-0.1 [1/mV] * (membrane.V + 47.13 [mV]))))
    in [1/ms]
beta_m = 0.08 [1/ms] * exp(-membrane.V / 11.0 [mV])
    in [1/ms]
dot(m) = (m_inf - m) / tau_m
    in [1]
m_inf = alpha_m / (alpha_m + beta_m)
    in [1]
tau_m = 1.0 / (alpha_m + beta_m)
    in [ms]

########################################################
[I_Na_Markov]
# this state dependence of Na channel was from Moreno et al 2011 (Sci. Transl. Med)
# contains free, charged, neutral drug

class1_drug_cat = 3
Lidocaine_fact = if(class1_drug_cat==2 and new_drug_mode==0, 1, 0) ## example for Ib
Flecainide_fact = if(class1_drug_cat==3 and new_drug_mode==0, 1, 0) ## example for Ic
Vernakalant_fact = if(class1_drug_cat==4 and new_drug_mode==0, 1, 0) 

x1 = 1.1821516171073378
x2 = 1.8128950937709263
x3 = 0.55559223164198501
x4 = 1.2653811014166259
x5 = 0.379465955877468
x6 = 2.5485320500798077
x7 = 1.5828527326859647
x8 = 1.0237930757107652
x9 = 0.63628656115270266
x10 = 1.0802804689922176
x11 = 1.0992577563248505
x12 = 1.1001781318138173
x13 = 1.0751649122176028
x14 = 1.0400623701712255*0.1
x15 = 1.0221615376561712
x16 = 1.0349852098209555
x17 = 1.0095837445899951
x18 = 1.1952465
x19 = 1.811411333*1.05
x20 = 0.8
x21 = 0.9994445714285713
x22 = 1.0284021
x23 = 0.98904877
x24 = 1.01288225
x25 = 1.00647894

f1 = 15802.517082265076
f2 = 11212.49445307003
f3 = 1.0835911457972944
f4 = 4.7213138217409707
f5 = 1.1886854610200599
f6 = 1.1293915676022106
f7 = 0.98647121091698153
f8 = 0.54542349779755606
f9 = 1.020713680006784
f10 = 2.6609951303941308
f11 = 1.1411905523331658
f12 = 5.3540204782968566
f13 = 1.028853996176295
f14 = 1.0033797797467918

l1 = 1.36922845112808845e+04
l2 = 1.36922845112808845e+04
l3 = 9.75801811222358206e-01
l4 = 4.78855031291120348e+00
l5 = 9.75801811222358206e-01
l6 = 9.78288593348167645e-01
l7 = 9.78288593348167645e-01
l8 = 9.05788719283946997e-01
l9 = 9.05788719283946997e-01
l10 = 4.84105307990853273e+00

v1 = 7170.4622644564224
v2 = 15352.068978379524
v3 = 0.78329295519833497
v4 = 6.2271179964787571
v5 = 22.10184390723893
v6 = 1.5107146709941404
v7 = 1.0935642293370962
v8 = 0.65910138578597266
v9 = 2.3700350948377
v10 = 6.2071593539114822
v11 = 0
v12 = 0
v13 = 0
v14 = 0

#### new drug components ####
new_drug_mode = 0
n_diffusion = 0
n_kd_open = 0
n_k_off = 0
n_ki_off = 0
n_kc_off = 0
n_p22 = 0
n_p23 = 0
n_p24 = 0
n_p25 = 0
n_p26 = 0
n_p27 = 0
n_p28 = 0
n_p29 = 0
n_p30 = 0
n_p31 = 0
n_p32 = 0
n_p33 = 0
n_p34 = 0
n_p35 = 0

diffusion = ((new_drug_mode*n_diffusion) + (Flecainide_fact*5500) + (Lidocaine_fact*500)  + (Vernakalant_fact*500)) #in [1 / M ms]
kd_open = ((new_drug_mode*n_kd_open) + (Flecainide_fact*11.2e-6) + (Lidocaine_fact*318e-6) + (Vernakalant_fact*318e-6)) * exp(-0.7 * membrane.V * membrane.F / (membrane.R * membrane.T))
conc = 0
pH = 7.4
pKa_newdrug = 7.4
pKa_Lidocaine = 7.6
pKa_Flecainide = 9.3
pKa_Vernakalant = 5.4
#pH = (if(Lidocaine_fact==1, pH_Lidocaine, 0)) + (if(Flecainide_fact==1, pH_Flecainide, 0)) + (if(new_drug_mode==1, pH_newdrug, 0))
pKa = (if(Vernakalant_fact==1, pKa_Vernakalant, 0)) + (if(Lidocaine_fact==1, pKa_Lidocaine, 0)) + (if(Flecainide_fact==1, pKa_Flecainide, 0)) + (if(new_drug_mode==1, pKa_newdrug, 0))
portion = 1/(1+10^(pH-pKa))
conc_dplus = portion * conc
conc_d = (1-portion) * conc

kon = conc_dplus * diffusion #if(conc_dplus>0.0001, conc_dplus * diffusion, 1e-8) #### for protonated drugs
kcon = kon
koff = kd_open * diffusion
kcoff = koff

k_on = conc_d * diffusion #if(conc_d>0.0001, , 1e-8) #### for neutral drugs
k_off = ((new_drug_mode*n_k_off) + (Flecainide_fact*400e-6) + (Lidocaine_fact*400e-6) + (Vernakalant_fact*400e-6)) * diffusion
ki_on = k_on / 2
ki_off = ((new_drug_mode*n_ki_off) + (Flecainide_fact*5.4e-6) + (Lidocaine_fact*3.4e-6) + (Vernakalant_fact*3.4e-6)) * diffusion
kc_on = k_on / 2
kc_off = ((new_drug_mode*n_kc_off) + (Flecainide_fact*800e-6) + (Lidocaine_fact*900e-6) + (Vernakalant_fact*900e-6)) * diffusion

Tfactor = 1 / (3 ^ ((37 - (membrane.T - 273)) / 10.0)) #0.19245

# Transition rates (ms-1)  
a11 = Tfactor * p1 / (p2 * exp(-(membrane.V - actshift) / p3) + p6 * exp(-(membrane.V - actshift) / p7))
a12 = Tfactor * p1 / (p2 * exp(-(membrane.V - actshift) / p4) + p6 * exp(-(membrane.V - actshift) / p7))
a13 = Tfactor * p1 / (p2 * exp(-(membrane.V - actshift) / p5) + p6 * exp(-(membrane.V - actshift) / p7))
b11 = Tfactor * p8 * exp(-(membrane.V - actshift) / p9)
b12 = Tfactor * p10 * exp(-(membrane.V - actshift - p11) / p9)
b13 = Tfactor * p12 * exp(-(membrane.V - actshift - p13) / p9)
#a3 = p14 * exp(-membrane.V / p15)
#b3 = p16 * exp(membrane.V / p17)
#aa = a3 / (a3 + b3)
#tau = 1 / (a3 + b3)
a3_ss = 1/(1+exp((membrane.V - p14_new) / p15_new))
a3_tau = h1 + p01 * exp(p16_new * (membrane.V - p14_new)) / (1 + exp(p17_new * (membrane.V - p14_new)))
a3 = Tfactor * a3_ss / a3_tau
b3 = Tfactor * (1 - a3_ss) / a3_tau
a2 = Tfactor * p18 * exp(membrane.V / p19)
b2 = (a13*a2*a3) / (b13*b3)
ax = p20 * a2
bx = p21 * a3

a13c = p22 * a13
b13c = if(kon>0, (b13 * kcon * koff * a13c) / (kon * kcoff * a13), 0)
a13n = p23 * a13
b13n = if(k_on>0, (b13 * kc_on * a13n * k_off) / (kc_off * a13 * k_on), 0)
ax1 = p24 * ax
bx1 = p25 * bx
ax2 = p26 * ax
bx2 = if(ki_on>0, (bx * k_on * ax2 * ki_off) / (ax * ki_on * k_off), 0)
a22 = p27 * a2
a_22 = p28 * a2
b22 = if(b13c>0, (a13c * a22 * a33) / (b13c * b33), 0)
b_22 = if(b13n>0, (a_33 * a13n * a_22) / (b_33 * b13n), 0)
b33 = p29 * b3
b_33 = p30 * b3
a33 = p31 * a3
a_33 = if(ki_on>0, (ki_off * a3 * kc_on * b_33) / (ki_on * kc_off * b3), 0)
## DIT or DpIT ONLY in Lidocaine (Inactivated, Trapped state)
a44 = p32 * a2
b44 = p33 * a3
a_44 = p34 * a2
b_44 = p35 * a2

actshift = -15*x19
h1 = 2*x20
p1 = 8.5539*x1
p2 = 7.4392e-2*x2
p3 = 17.0*x3
p4 = 15.0*x4
p5 = 12.0*x5
p6 = 2.0373e-1*x6
p7 = 150*x7
p8 = 7.5215e-2*x8
p9 = 20.3*x9
p10 = 2.7574*x10
p11 = 5*x11
p12 = 4.7755e-1*x12
p13 = 10*x13
p14 = 5.1458e-6 #5.1458e-6 *1.0325463712122342
p15 = 8.2471 #0.8*8.2471 * 0.10401603829601243
p16 = 6.1205 #6.1205 * 0.96668483687506801
p17 = 12.542 #0.8*12.542 * 1.0908872227689068
p18 = 13.370*x14
p19 = 43.749*x15
p20 = 3.4229e-2*x16
p21 = 1.7898e-2*x17
p14_new = -70*x21
p15_new = 3.5*x22
p16_new = 0.052 * 2.9*x23
p17_new = 0.132 * 1.9*x24
p01 = 41*x25

p22 = (new_drug_mode*n_p22) + (Flecainide_fact*3.6324e-3*f1) + (Lidocaine_fact*5.6974e-03*l1) + (Vernakalant_fact*5.6974e-03*v1) #3.6324e-3
p23 = (new_drug_mode*n_p23) + (Flecainide_fact*2.6452*f2) + (Lidocaine_fact*8.4559e+01*l2) + (Vernakalant_fact*8.4559e+01*v2) #2.6452
p24 = (new_drug_mode*n_p24) + (Flecainide_fact*5.7831e-5*f3) + (Lidocaine_fact*6.3992e-07*l3) + (Vernakalant_fact*6.3992e-07*v3) #5.7831e-5
p25 = (new_drug_mode*n_p25) + (Flecainide_fact*1.6689e-8*f4) + (Lidocaine_fact*1.3511e+00*l4) + (Vernakalant_fact*1.3511e+00*v4) #1.6689e-8
p26 = (new_drug_mode*n_p26) + (Flecainide_fact*2.6126e-01*f5) + (Lidocaine_fact*1.3110e-01*l5) + (Vernakalant_fact*1.3110e-01*v5) #2.6126e-01
p27 = (new_drug_mode*n_p27) + (Flecainide_fact*1.4847e3*f6) + (Lidocaine_fact*6.7067e-06*l6) + (Vernakalant_fact*6.7067e-06*v6) #1.4847e3
p28 = (new_drug_mode*n_p28) + (Flecainide_fact*4.2385e+01*f7) + (Lidocaine_fact*1.7084e-05*l7) + (Vernakalant_fact*1.7084e-05*v7) #4.2385e+01
p29 = (new_drug_mode*n_p29) + (Flecainide_fact*1.7352e-6*f8) + (Lidocaine_fact*1.9698e-05*l8) + (Vernakalant_fact*1.9698e-05*v8) #1.7352e-6
p30 = (new_drug_mode*n_p30) + (Flecainide_fact*2.1181e+00*f9) + (Lidocaine_fact*4.8477*l9) + (Vernakalant_fact*4.8477*v9) #2.1181e+00
p31 = (new_drug_mode*n_p31) + (Flecainide_fact*6.7505e-05*f10) + (Lidocaine_fact*3.2976*l10) + (Vernakalant_fact*3.2976*v10) #6.7505e-05
p32 = (new_drug_mode*n_p32) + (Flecainide_fact*2.4135*f11) + (Lidocaine_fact*0) + (Vernakalant_fact*2.4135*v11)
p33 = (new_drug_mode*n_p33) + (Flecainide_fact*4.9001e-2*f12) + (Lidocaine_fact*0) + (Vernakalant_fact*4.9001e-2*v12) 
p34 = (new_drug_mode*n_p34) + (Flecainide_fact*1.0326e-03*f13) + (Lidocaine_fact*0) + (Vernakalant_fact*1.0326e-03*v13) 
p35 = (new_drug_mode*n_p35) + (Flecainide_fact*2.1378e-02*f14) + (Lidocaine_fact*0) + (Vernakalant_fact*2.1378e-02*v14)

dot(IC3) = -IC3 * (a11 + a3 + ki_on) + IC2 * b11 + C3 * b3 + ki_off * DIC3
dot(IC2) = -IC2 * (b11 + a3 + a12 + ki_on) + IC3 * a11 + IF * b12 + C2 * b3 + ki_off * DIC2
dot(IF) = -IF * (b12 + a3 + b2 + ki_on) + IC2 * a12 + C1 * b3 + O * a2 + ki_off * DIF
dot(C3) = -C3 * (b3 + a11 + kcon + kc_on) + IC3 * a3 + C2 * b11 + DpC3 * kcoff + DC3 * kc_off
dot(C2) = -C2 * (b11 + b3 + a12 + kcon + kc_on) + C3 * a11 + IC2 * a3 + C1 * b12 + DpC2 * kcoff + DC2 * kc_off
dot(C1) = -C1 * (b12 + b3 + a13 + kcon + kc_on) + C2 * a12 + IF * a3 + O * b13 + DpC1 * kcoff + DC1 * kc_off
dot(O) = -O * (b13 + a2 + ax + kon + k_on) + C1 * a13 + IF * b2 + IS * bx + DpO * koff + DO * k_off
dot(IS) = -IS * (bx + ki_on) + O * ax + DIS * ki_off

dot(DpIC3) = -DpIC3 * (a33 + a11) + DpIC2 * b11 + DpC3 * b33
dot(DpIC2) = -DpIC2 * (b11 + a33 + a12) + DpIC3 * a11 + DpIF * b12 + DpC2 * b33
dot(DpIF) = -DpIF * (b12 + a33 + b22 + a44) + DpIC2 * a12 + DpC1 * b33 + DpO * a22 + DpIT * b44
dot(DpC3) = -DpC3 * (b33 + a11 + kcoff) + DpIC3 * a33 + DpC2 * b11 + C3 * kcon
dot(DpC2) = -DpC2 * (b11 + b33 + a12 + kcoff) + DpC3 * a11 + DpIC2 * a33 + DpC1 * b12 + C2 * kcon
dot(DpC1) = -DpC1 * (b12 + b33 + a13c + kcoff) + DpC2 * a12 + DpIF * a33 + DpO * b13c + C1 * kcon
dot(DpO) = -DpO * (b13c + a22 + ax1 + koff) + DpC1 * a13c + DpIF * b22 + DpIS * bx1 + O * kon
dot(DpIS) = -DpIS * (bx1) + DpO * ax1
dot(DpIT) = -DpIT * b44 + DpIF * a44

dot(DIC3) = -DIC3 * (a_33 + a11 + ki_off) + DIC2 * b11 + DC3 * b_33 + ki_on * IC3
dot(DIC2) = -DIC2 * (b11 + a_33 + a12 + ki_off) + DIC3 * a11 + DIF * b12 + DC2 * b_33 + ki_on * IC2
dot(DIF) = -DIF * (b12 + a_33 + b_22 + a_44 + ki_off) + DIC2 * a12 + DC1 * b_33 + DO * a_22 + DIT * b_44 + ki_on * IF
dot(DC3) = -DC3 * (b_33 + a11 + kc_off) + DIC3 * a_33 + DC2 * b11 + C3 * kc_on
dot(DC2) = -DC2 * (b11 + b_33 + a12 + kc_off) + DC3 * a11 + DIC2 * a_33 + DC1 * b12 + C2 * kc_on
dot(DC1) = -DC1 * (b12 + b_33 + a13n + kc_off) + DC2 * a12 + DIF * a_33 + DO * b13n + C1 * kc_on
dot(DO) = -DO * (b13n + a_22 + ax2 + k_off) + DC1 * a13n + DIF * b_22 + DIS * bx2 + O * k_on
dot(DIS) = -DIS * (bx2 + ki_off) + DO * ax2 + IS * ki_on
dot(DIT) = -DIT * b_44 + DIF * a_44

#E_Na = (phys.RTF) * log(138/10)
E_Na = membrane.R * membrane.T / membrane.F * log(standard_ionic_concentrations.Na_o / intracellular_ion_concentrations.Na_i)
    in [mV]
g_Na = x18*23.5 * 0.31*0.5 #23.5 * 0.31#0.266#* 7.8 *1.0 * 21
    in [1/ms]
I_Na_tot = parameters.remodeling_AF_INa * (1 - parameters.INa_Block) * membrane.Cm * g_Na * O * (membrane.V - E_Na)
    in [pA]

########################################################

[intracellular_ion_concentrations]
B1 = (2.0 * Na_Ca_exchanger_current.i_NaCa - (sarcolemmal_calcium_pump_current.i_CaP + L_type_Ca_channel.i_Ca_L + background_currents.i_B_Ca)) / (2.0 * V_i * membrane.F) + (V_up * (Ca_leak_current_by_the_NSR.i_up_leak - Ca_uptake_current_by_the_NSR.i_up) + Ca_release_current_from_JSR.i_rel * V_rel) / V_i
    in [mM/ms]
B2 = 1.0 + Ca_buffers.TRPN_max * Ca_buffers.Km_TRPN / (Ca_i + Ca_buffers.Km_TRPN) ^ 2.0 + Ca_buffers.CMDN_max * Ca_buffers.Km_CMDN / (Ca_i + Ca_buffers.Km_CMDN) ^ 2.0
    in [1]
dot(Ca_i) = B1 / B2
    in [mM]
dot(Ca_rel) = (transfer_current_from_NSR_to_JSR.i_tr - Ca_release_current_from_JSR.i_rel) * (1.0 + Ca_buffers.CSQN_max * Ca_buffers.Km_CSQN / (Ca_rel + Ca_buffers.Km_CSQN) ^ 2.0) ^ (-1.0)
    in [mM]
dot(Ca_up) = Ca_uptake_current_by_the_NSR.i_up - (Ca_leak_current_by_the_NSR.i_up_leak + transfer_current_from_NSR_to_JSR.i_tr * V_rel / V_up)
    in [mM]
dot(K_i) = (2.0 * sodium_potassium_pump.i_NaK - (time_independent_potassium_current.i_K1 + transient_outward_K_current.i_to + ultrarapid_delayed_rectifier_K_current.i_Kur + rapid_delayed_rectifier_K_current.i_Kr + slow_delayed_rectifier_K_current.i_Ks + background_currents.i_B_K)) / (V_i * membrane.F)
    in [mM]
dot(Na_i) = (-3.0 * sodium_potassium_pump.i_NaK - (3.0 * Na_Ca_exchanger_current.i_NaCa + background_currents.i_B_Na + fast_sodium_current.i_Na)) / (V_i * membrane.F)
    in [mM]
V_cell = 20100.0
    in [um^3]
V_i = V_cell * 0.68
    in [um^3]
V_rel = 0.0048 * V_cell
    in [um^3]
V_up = 0.0552 * V_cell
    in [um^3]

[membrane]
markov_Na = 1
Cm = 100.0
    in [F  (1e-12)]
F = 96.4867
    in [C/mmol]
R = 8.3143
    in [J/mol/K]
T = 310.0
    in [K]
FRT = F / R / T
dot(V) = if(markov_Na == 1, (-(I_Na_Markov.I_Na_tot + time_independent_potassium_current.i_K1 + transient_outward_K_current.i_to + ultrarapid_delayed_rectifier_K_current.i_Kur + rapid_delayed_rectifier_K_current.i_Kr + slow_delayed_rectifier_K_current.i_Ks + background_currents.i_B_Na + background_currents.i_B_Ca + sodium_potassium_pump.i_NaK + sarcolemmal_calcium_pump_current.i_CaP + Na_Ca_exchanger_current.i_NaCa + L_type_Ca_channel.i_Ca_L + i_st + membrane.Cm * TRPM4.I_TRPM4) / Cm) , (-(fast_sodium_current.i_Na + time_independent_potassium_current.i_K1 + transient_outward_K_current.i_to + ultrarapid_delayed_rectifier_K_current.i_Kur + rapid_delayed_rectifier_K_current.i_Kr + slow_delayed_rectifier_K_current.i_Ks + background_currents.i_B_Na + background_currents.i_B_Ca + sodium_potassium_pump.i_NaK + sarcolemmal_calcium_pump_current.i_CaP + Na_Ca_exchanger_current.i_NaCa + L_type_Ca_channel.i_Ca_L + i_st + membrane.Cm * TRPM4.I_TRPM4) / Cm))
#dot(V) = -(fast_sodium_current.i_Na + time_independent_potassium_current.i_K1 + transient_outward_K_current.i_to + ultrarapid_delayed_rectifier_K_current.i_Kur + rapid_delayed_rectifier_K_current.i_Kr + slow_delayed_rectifier_K_current.i_Ks + background_currents.i_B_Na + background_currents.i_B_Ca + sodium_potassium_pump.i_NaK + sarcolemmal_calcium_pump_current.i_CaP + Na_Ca_exchanger_current.i_NaCa + L_type_Ca_channel.i_Ca_L + i_st + membrane.Cm * TRPM4.I_TRPM4) / Cm
    in [mV]
stim_amplitude = -4000.0
    in [pA]
stim_duration = 1.0
    in [ms]
stim_end = 50000.0
    in [ms]
stim_period = 1000.0
    in [ms]
stim_start = 50.0
    in [ms]
level = 0 bind pace  
i_st = stim_amplitude * level
    in [pA]

[rapid_delayed_rectifier_K_current]
g_Kr =  2.94117649999999994e-02
    in [1/ms]
i_Kr = (1 - parameters.IKr_Block) * membrane.Cm * g_Kr * rapid_delayed_rectifier_K_current_xr_gate.xr * (membrane.V - time_independent_potassium_current.E_K) / (1.0 + exp((membrane.V + 15.0 [mV]) / 22.4 [mV]))
    in [pA]

[rapid_delayed_rectifier_K_current_xr_gate]
alpha_xr = piecewise(abs(membrane.V + 14.1 [mV]) < 1e-10 [mV], 0.0015 [1/ms], 0.0003 [1/mV/ms] * (membrane.V + 14.1 [mV]) / (1.0 - exp((membrane.V + 14.1 [mV]) / -5.0 [mV])))
    in [1/ms]
beta_xr = piecewise(abs(membrane.V - 3.3328 [mV]) < 1e-10 [mV],  3.78361180000000004e-04 [1/ms],  7.38980000000000030e-05 [1/mV/ms] * (membrane.V - 3.3328 [mV]) / (exp((membrane.V - 3.3328 [mV]) / 5.1237 [mV]) - 1.0))
    in [1/ms]
tau_xr = (alpha_xr + beta_xr) ^ (-1.0)
    in [ms]
dot(xr) = (xr_infinity - xr) / tau_xr
    in [1]
xr_infinity = (1.0 + exp((membrane.V + 14.1 [mV]) / -6.5 [mV])) ^ (-1.0)
    in [1]

[sarcolemmal_calcium_pump_current]
i_CaP = membrane.Cm * i_CaP_max * intracellular_ion_concentrations.Ca_i / (0.0005 [mM] + intracellular_ion_concentrations.Ca_i)
    in [pA]
i_CaP_max = 0.275
    in [A/F]

#
# TRPM4 current
#
[TRPM4]
use membrane.V

E_rev = log((standard_ionic_concentrations.K_o  + standard_ionic_concentrations.Na_o )/(intracellular_ion_concentrations.K_i + intracellular_ion_concentrations.Na_i)) / membrane.FRT
I_TRPM4 = G_TRPM4 * TRPM4_Act_Vm * TRPM4_Act_Ca * (V - E_rev)
G_TRPM4 = 0.01

dot(TRPM4_Act_Vm) = (Act_Vm_ss - TRPM4_Act_Vm) / tau_Act_Vm
    Act_Vm_ss = 0.04 + (1.0 - 0.04) / (1 + exp(-(V - 40) / 9.3))
    tau_Act_Vm = 15 in [ms]

dot(TRPM4_Act_Ca) = (Act_Ca_ss - TRPM4_Act_Ca) / tau_Act_Ca
    Act_Ca_ss = 0.03 + (1.0 - 0.03) / (1.0 + (20E-3 / intracellular_ion_concentrations.Ca_i) ^ 1.6)
    tau_Act_Ca = 30 in [ms]

[slow_delayed_rectifier_K_current]
g_Ks =  parameters.remodeling_AF_IKs * 1.29411759999999987e-01
    in [1/ms]
i_Ks = (1.0 - parameters.IKs_Block) * membrane.Cm * g_Ks * slow_delayed_rectifier_K_current_xs_gate.xs ^ 2.0 * (membrane.V - time_independent_potassium_current.E_K)
    in [pA]

[slow_delayed_rectifier_K_current_xs_gate]
alpha_xs = piecewise(abs(membrane.V - 19.9 [mV]) < 1e-10 [mV], 0.00068 [1/ms], 4e-05 [1/mV/ms] * (membrane.V - 19.9 [mV]) / (1.0 - exp((membrane.V - 19.9 [mV]) / -17.0 [mV])))
    in [1/ms]
beta_xs = piecewise(abs(membrane.V - 19.9 [mV]) < 1e-10 [mV], 0.000315 [1/ms], 3.5e-05 [1/mV/ms] * (membrane.V - 19.9 [mV]) / (exp((membrane.V - 19.9 [mV]) / 9.0 [mV]) - 1.0))
    in [1/ms]
tau_xs = 0.5 * (alpha_xs + beta_xs) ^ (-1.0)
    in [ms]
dot(xs) = (xs_infinity - xs) / tau_xs
    in [1]
xs_infinity = (1.0 + exp((membrane.V - 19.9 [mV]) / -12.7 [mV])) ^ (-0.5)
    in [1]

[sodium_potassium_pump]
Km_K_o = 1.5
    in [mM]
Km_Na_i = 10.0
    in [mM]
f_NaK = (1.0 + 0.1245 * exp(-0.1 * membrane.F * membrane.V / (membrane.R * membrane.T)) + 0.0365 * sigma * exp(-membrane.F * membrane.V / (membrane.R * membrane.T))) ^ (-1.0)
    in [1]
i_NaK = (1.0 - parameters.INaK_Block) * membrane.Cm * i_NaK_max * f_NaK * 1.0 / (1.0 + (Km_Na_i / intracellular_ion_concentrations.Na_i) ^ 1.5) * standard_ionic_concentrations.K_o / (standard_ionic_concentrations.K_o + Km_K_o)
    in [pA]
i_NaK_max =  5.99338739999999981e-01
    in [A/F]
sigma = 1.0 / 7.0 * (exp(standard_ionic_concentrations.Na_o / 67.3 [mM]) - 1.0)
    in [1]

[standard_ionic_concentrations]
Ca_o = parameters.Ca_o
    in [mM]
K_o = parameters.K_o
    in [mM]
Na_o = parameters.Na_o
    in [mM]

[time_independent_potassium_current]
E_K = membrane.R * membrane.T / membrane.F * log(standard_ionic_concentrations.K_o / intracellular_ion_concentrations.K_i)
    in [mV]
g_K1 = parameters.remodeling_AF_IK1 * 0.09
    in [1/ms]
i_K1 = (1.0 - parameters.IK1_Block) * membrane.Cm * g_K1 * (membrane.V - E_K) / (1.0 + exp(0.07 [1/mV] * (membrane.V + 80.0 [mV])))
    in [pA]

[transfer_current_from_NSR_to_JSR]
i_tr = (intracellular_ion_concentrations.Ca_up - intracellular_ion_concentrations.Ca_rel) / tau_tr
    in [mM/ms]
tau_tr = 180.0
    in [ms]

[transient_outward_K_current]
K_Q10 = 3.0
    in [1]
g_to = parameters.remodeling_AF_Ito * 0.1652
    in [1/ms]
i_to = (1.0 - parameters.Ito_Block) * membrane.Cm * g_to * transient_outward_K_current_oa_gate.oa ^ 3.0 * transient_outward_K_current_oi_gate.oi * (membrane.V - time_independent_potassium_current.E_K)
    in [pA]

[transient_outward_K_current_oa_gate]
alpha_oa = 0.65 [1/ms] * (exp((membrane.V - -10.0 [mV]) / -8.5 [mV]) + exp((membrane.V - -10.0 [mV] - 40.0 [mV]) / -59.0 [mV])) ^ (-1.0)
    in [1/ms]
beta_oa = 0.65 [1/ms] * (2.5 + exp((membrane.V - -10.0 [mV] + 72.0 [mV]) / 17.0 [mV])) ^ (-1.0)
    in [1/ms]
dot(oa) = (oa_infinity - oa) / tau_oa
    in [1]
oa_infinity = (1.0 + exp((membrane.V - -10.0 [mV] + 10.47 [mV]) / -17.54 [mV])) ^ (-1.0)
    in [1]
tau_oa = (alpha_oa + beta_oa) ^ (-1.0) / transient_outward_K_current.K_Q10
    in [ms]

[transient_outward_K_current_oi_gate]
alpha_oi = (18.53 [ms] + 1.0 [ms] * exp((membrane.V - -10.0 [mV] + 103.7 [mV]) / 10.95 [mV])) ^ (-1.0)
    in [1/ms]
beta_oi = (35.56 [ms] + 1.0 [ms] * exp((membrane.V - -10.0 [mV] - 8.74 [mV]) / -7.44 [mV])) ^ (-1.0)
    in [1/ms]
dot(oi) = (oi_infinity - oi) / tau_oi
    in [1]
non_inact_component = 0.0  
oi_infinity = non_inact_component + (1 - non_inact_component) * (1 + exp((membrane.V - -10.0 [mV] + 33.1 [mV]) / 5.3 [mV])) ^ (-1.0)
    in [1]
tau_oi = (alpha_oi + beta_oi) ^ (-1.0) / transient_outward_K_current.K_Q10
    in [ms]

[ultrarapid_delayed_rectifier_K_current]
g_Kur = 0.005 [1/ms] + 0.05 [1/ms] / (1.0 + exp((membrane.V - 15.0 [mV]) / -13.0 [mV]))
    in [1/ms]
i_Kur = parameters.remodeling_AF_IKur * (1.0 - parameters.IKur_Block) * membrane.Cm * g_Kur * ultrarapid_delayed_rectifier_K_current_ua_gate.ua ^ 3.0 * ultrarapid_delayed_rectifier_K_current_ui_gate.ui * (membrane.V - time_independent_potassium_current.E_K)
    in [pA]

[ultrarapid_delayed_rectifier_K_current_ua_gate]
alpha_ua = 0.65 [1/ms] * (exp((membrane.V - -10.0 [mV]) / -8.5 [mV]) + exp((membrane.V - -10.0 [mV] - 40.0 [mV]) / -59.0 [mV])) ^ (-1.0)
    in [1/ms]
beta_ua = 0.65 [1/ms] * (2.5 + exp((membrane.V - -10.0 [mV] + 72.0 [mV]) / 17.0 [mV])) ^ (-1.0)
    in [1/ms]
tau_ua = (alpha_ua + beta_ua) ^ (-1.0) / transient_outward_K_current.K_Q10
    in [ms]
dot(ua) = (ua_infinity - ua) / tau_ua
    in [1]
ua_infinity = (1.0 + exp((membrane.V - -10.0 [mV] + 20.3 [mV]) / -9.6 [mV])) ^ (-1.0)
    in [1]

[ultrarapid_delayed_rectifier_K_current_ui_gate]
alpha_ui = (21.0 [ms] + 1.0 [ms] * exp((membrane.V - -10.0 [mV] - 195.0 [mV]) / -28.0 [mV])) ^ (-1.0)
    in [1/ms]
beta_ui = 1.0 [1/ms] / exp((membrane.V - -10.0 [mV] - 168.0 [mV]) / -16.0 [mV])
    in [1/ms]
tau_ui = (alpha_ui + beta_ui) ^ (-1.0) / transient_outward_K_current.K_Q10
    in [ms]
dot(ui) = (ui_infinity - ui) / tau_ui
    in [1]
ui_infinity = (1.0 + exp((membrane.V - -10.0 [mV] - 109.45 [mV]) / 27.48 [mV])) ^ (-1.0)
    in [1]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      100.0    2.0      1000.0   0

[[script]]
import matplotlib.pyplot as pl
import myokit

#
#

pl.figure()

# Get model from magic method
m = get_model()

m.set_value('standard_ionic_concentrations.K_o', 5.4)

# Create a pacing protocol
bcl = 1000
p = myokit.pacing.blocktrain(bcl, 2.0, offset=20)

# Create simulation and run
s = myokit.Simulation(m, p)
s.pre(bcl*200)
s_MUT = myokit.Simulation(m, p)
s_MUT.pre(bcl*200)

# Try several basal levels of TRPM4
levels = [0.0, 0.1, 0.5, 1.5]
for k in range(0,4):
    
    # Set the TRPM4 conductance to WT for this cell 
    s.set_constant('TRPM4.G_TRPM4', 0.084 * levels[k])

    # Pre-pace for a hundred beats
    
    # Run a simulation
    d = s.run(2000, log=['environment.time', 'membrane.V', 'intracellular_ion_concentrations.Ca_i', 'intracellular_ion_concentrations.Ca_up', 'TRPM4.I_TRPM4'])
    
    
    # Reset the simulation (this restores the original state and sets time
    # back to t=0 but does not affect Ko
    s.reset()
    
    
    # Set the TRPM4 conductance to MUTANT for this cell 
    s_MUT.set_constant('TRPM4.G_TRPM4', 6.3 * 0.084 * levels[k])

    # Pre-pace for a hundred beats
    s_MUT.pre(bcl*100)

    # Run a simulation
    d_MUT = s_MUT.run(2000, log=['environment.time', 'membrane.V', 'intracellular_ion_concentrations.Ca_i', 'intracellular_ion_concentrations.Ca_up', 'TRPM4.I_TRPM4'])
    
    # Plot the resulting action potential
    pl.subplot(2,4,k+1)
    pl.plot(
        d['environment.time'],
        d['membrane.V'],
        d_MUT['environment.time'],
        d_MUT['membrane.V'],
        )
    pl.subplot(2,4,4+k+1)
    pl.plot(
        d['environment.time'],
        d['TRPM4.I_TRPM4'],
        d_MUT['environment.time'],
        d_MUT['TRPM4.I_TRPM4'],
        )
    
    d.save_csv("Courtemanche-1998-RA-WT-%s.csv" % levels[k])
    d_MUT.save_csv("Courtemanche-1998-RA-MUT-%s.csv" % levels[k])
    
    # Reset the simulation (this restores the original state and sets time
    # back to t=0 but does not affect Ko
    s_MUT.reset()


# Display the result

#pl.suptitle('ORd2011 - '+ types[int(m.value('cell.kind'))] +' cell')
#pl.plot(d['engine.time'], d['membrane.v'], d_RV['engine.time'], d_RV['membrane.v'])
#pl.title('Membrane potential')
#pl.show()

